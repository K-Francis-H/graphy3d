//Algebra.js
//This Object takes in an algebraic expression and translates it to 
//ready-to-execute javascript, including support for exponentiation,
//implicit multiplication, and built in JS functions.
//TODO clean code up, use found vars to build regex for implicit mul, exp, etc
 
function Algebra(expression){

   var vars = getVars(expression); //get vars in string from uncleaned expression
   var rawExpression = expression;
   var expression = cleanExpression(expression, vars);
   //this.vars = getVars(this.expression);
   console.log("found variables: "+vars);

   this.getJS = function(){
      return expression;
   }
   this.getAlgebra = function(){
      return rawExpression;
   }
   this.getVars = function(){
      return vars;
   }
   
   //returns a string of all variables in the expression
   function getVars(expression){
      //capitalize function names
      expression = expression.replace( /asin/g, "ASIN")
                             .replace( /acos/g, "ACOS")
                             .replace( /atan/g, "ATAN")
                             .replace( /sqrt/g, "SQRT")
                             .replace( /sin/g, "SIN")
                             .replace( /cos/g, "COS")
                             .replace( /tan/g, "TAN")
                             .replace( /pow/g, "POW")
                             .replace( /abs/g, "ABS")
                             .replace( /log/g, "LOG")
                             .replace( /exp/g, "EXP");

      var rawVars = expression.match( /[a-z]/g );
      vars = "";
      for(var i=0; i < rawVars.length; i++)
          if( !isIn(vars, rawVars[i]) )
             vars += rawVars[i];
      
      function isIn(arr, char){
         for(var i=0; i < arr.length; i++)
           if(arr[i] === char)
              return true;
         return false;
      }

      return vars;
   }

   function cleanExpression(expression, vars){
      //TODO change based on set vars:
      //temporarily make 'tan', 'sqrt' unmatchable ('t' is a variable name)
      //hide functions inside of parentheses to make identification easier
      //expression = expression.replace( /(tan|sin|cos|sqrt|pow|arctan|arcsin|arccos)\(.*?\)/g, "($&)");
   
      //find all '^'s... have to run this each time we replace a '^' with pow

      var index = expression.indexOf('^');
      var isError = false;
      while( index > -1){
         var left = getLeftOperand(expression, index);//TODO
         console.log("left: "+left.corrected);
         var right = getRightOperand(expression, index);
         console.log("right: "+right.found);
         console.log("pow("+left.corrected+","+right.corrected+")");
         /*leftMatchStr = left.replace( /\(|\)|\+|\*|\/|\-/g, "\\$&")
                            .replace( new RegExp( "["+vars+"]|[0-9]", "g"), "$&[\\)]*");
         console.log("left matc str "+leftMatchStr);
         console.log("left match "+expression.match( new RegExp( leftMatchStr ) ) );
         rightMatchStr = right.replace( /\(|\)|\+|\*|\/|\-/g, "\\$&")
                              .replace( new RegExp( "\(|\)|["+vars+"]|[0-9]", "g"), "$&[\\(]*");
         console.log("right matc str "+rightMatchStr);
         var re = new RegExp( "("+leftMatchStr+"[\\)]*\\^[\\(]*"+rightMatchStr+")", "g" );*/
         //console.log(re+" "+expression.match(re));
         if( expression.indexOf( left.found+"^"+right.found ) > -1 ){//TODO no match if unbalanced parentheses...
            expression = expression.replace( left.found+"^"+right.found, "pow("+left.corrected+","+right.corrected+")"); //arg1 : leftMatchStr+"^"+rightMatchStr
         }
         else{
            isError = true;
            break;
         }
         index = expression.indexOf('^');
         console.log("exp: "+expression);
      }
      

      expression = expression.replace( /tan/g, "TAN")
                             .replace( /sqrt/g, "SQRT")
                             .replace( /pow/g, "POW")
                             .replace( /exp/g, "EXP");
/*IMPLICIT MULTIPLICATION*/
//TODO switch over to using vars instead of hard coded var match
      //if( expression.match( /([xytpw)]|[0-9])(?=[^\^*+-/,).0-9])/ ) ){
         //alert(expression.match( /([xytpw)]|[0-9])(?=[^*+-/,).0-9])/g));
         expression = expression.replace( /([xytpw)]|[0-9])(?=[^\^*+-/,).0-9])/g, '$&*' );
         console.log(expression);
      //}
      //if( 
         new RegExp("(["+vars+"])(?=[0-9])", "g")
         expression = expression.replace( /([xytpw)])(?=[0-9])/g, '$&*'); //for cases like x9 or sin()4




      //restore tan, sqrt and return
      expression = expression.replace( /TAN/g, "tan")
                       .replace( /SQRT/g, "sqrt")
                       .replace( /POW/g, "pow")
                       .replace( /EXP/g, "exp");

       expression = expression.replace( /asin|atan|acos|sqrt|abs|pow|exp|log|sin|cos|tan/g, "Math.$&");
      console.log("claen expr="+expression);
      return expression;
   }//end cleanExpression()

   //functions
   this.setVars = function(vars){
      this.vars = "";
      for(var i=0; i < vars.length; i++)
         this.vars[i] = vars[i];
   }

function isVar(char){
   //console.log("curChar: "+char);
   if( char === undefined)
      return false;
   if( char.match( /[xytpw]/ ) !== null )
      return true;
   return false;
}

function isNum(char){
   if( char === undefined)
      return false;
   if( char.match( /[0-9\.]/ ) !== null)
      return true;
   return false;
}


/*getLeftOperand(expression : String, index : Number )
*-finds left hand operand of the exponentiation operator '^'
*by considering three cases:
*
*1.) operand is a variable
*2.) operand is a constant number
*3.) operand is an expression or function
*
*returns an Object with these attributes:
*found     : String, the found operand may have erroneous parentheses
*corrected : String, the corrected operand if found has erroneous parentheses
*
*in case that found is error free, found === corrected
*/
function getLeftOperand(expression, index){
   console.log("getLeftOperand exp="+expression);
   var leftOperand = new Object();
   var startIndex = index; /*used in case of unbalanced parenthetical for recursion*/
   var operand = new Array();
   var finished = false;
   //while(!finished){
      var curChar = expression[--index];
      //alert(curChar);
      if( isVar(curChar) ){
         finished = true;
         return curChar;
      }
      else if( isNum(curChar) ){
         operand.push(curChar);
         curChar = expression[--index];
         while( isNum(curChar) ){
            operand.push(curChar);
            curChar = expression[--index];
         }
         finished = true;
      }
      else if( curChar === ')' ){//TODO report unbalanced expression if loop goes infinite
         console.log("here )");
         var pDepth = 1; //parentheses depth
         operand.push(curChar);
         curChar = expression[--index];
         while( pDepth > 0 && index > -1){
            //curChar = expression[--index];
            if( curChar === ')'){
               pDepth++;
            }
            else if( curChar === '(' ){
               pDepth--;
            }
            operand.push(curChar);
            curChar = expression[--index];
         }
         //error check TODO not always true yo
         if(pDepth > 0){
            alert("unbalanced parentheses");
            for( ; pDepth > 0; pDepth--){ 
               expression = expression.replace( ")", "");
               startIndex--;/*offset startIndex to account for removal of parentheses*/
               console.log("after removal: "+expression);
            }
            console.log("entering recursion");
            leftOperand.corrected = getLeftOperand(expression, startIndex).found;
            //console.log("recursion complete, op= "+opStr);
            //return opStr;
         }
         //now find if we were in a function
         // sin, cos, tan, atan, asin, acos, sqrt, ln, exp, pow, abs
         //TODO

         if(index >= 3){//if we have at least 4 chars ahead
            var sub = expression.substr(index-3, index+1);
            var mat = sub.match( /asin|atan|acos|sqrt/ );
            if( mat !== null)
               operand.push(new String(mat));
            else{
               mat = sub.match( /sin|cos|tan|exp|pow|abs|ln/ );
               if( mat !== null)
                 operand.push(new String(mat));
            }
         }
         else if(index >=2){//if we have at least 3 chars
            var sub = expression.substr(index-2, index+1);
            var mat = sub.match( /sin|cos|tan|ln|exp|pow|abs/ );
            if( mat !== null)
               operand.push(new String(mat));
         }
         else if(index >= 1){
            var sub = expression.substr(index-1, index+1);
            var mat = sub.match( /ln/ );
            if( mat !== null)
               operand.push(new String(mat));
         }
         finished = true;
      }
      finished = true;
   //}//end while
   console.log("left operand: "+operand);
   //now flip array to rebuild operand
   var opString = "";
   for(var i = operand.length-1; i > -1; i--){
      opString += operand[i];
   }
   leftOperand.found = opString;
   if( !leftOperand.corrected ){//if the parentheses are properly balanced
       leftOperand.corrected = opString;
   }
   return leftOperand;
}//end getLeftOperand()

function getRightOperand(expression, index){
   var rightOperand = new Object();
   var startIndex = index; /*used for recursion if unbalanced parenthetical (return fixed expression)*/
   var operand = new Array();
   var finished = false;
   //while(!finished){
      var curChar = expression[++index];
      if( isVar(curChar) )
         return curChar;
      else if( isNum(curChar) ){
         operand.push(curChar);
         curChar = expression[++index];
         while( isNum(curChar) ){
            operand.push(curChar);
            curChar = expression[++index];
         }
         finished = true;
      }
      else if( curChar === '(' ){//TODO report unbalanced expression if loop goes infinite
         var pDepth = 1; //parentheses depth
         operand.push(curChar);
         curChar = expression[++index];
         while( pDepth > 0 && index < expression.length ){
            //curChar = expression[--index];
            if( curChar === ')'){
               pDepth--;
            }
            else if( curChar === '(' ){
               pDepth++;
            }
            operand.push(curChar);
            curChar = expression[++index];
         }
         /*check for unbalanced parentheses*/
         if(pDepth > 0){
            alert("unbalanced parentheses");
            for( ; pDepth > 0; pDepth--){ 
               expression = expression.replace( "(", "");
            }
            rightOperand.corrected = getRightOperand(expression, startIndex).found;
         }
      }
      else{//see if its a function
         //no length check because even ln() is 4 chars, other possibility is that this is a malformed expression
         var sub = expression.substr(index, index+3);
         console.log("sub: "+sub);
         var mat = sub.match( /asin|acos|atan|sin|cos|tan|exp|abs|ln|pow/ );
         if( mat !== null)
            operand.push(new String(mat) );
         index += new String(mat).length-1;
         console.log("mat len: "+mat.length);
         console.log(index);
         var pDepth = 1; //parentheses depth

         curChar = expression[++index];//TODO
         operand.push(curChar); //push first parenthesis
         console.log("curChar before pDepth loop: "+curChar);
         var bflag = 10
         while( pDepth > 0 && index < expression.length && bflag > 0){//pDepth > 0 ){
            curChar = expression[++index];
            console.log("len: "+expression.length+" index: "+index);
            //console.log("loopchar1: "+curChar);
            if( curChar === ")"){
               //console.log("here")
               pDepth--;
            }
            else if( curChar === '(' ){
               pDepth++;
            }
            //otherwise just push the symbol
            operand.push(curChar);
            //curChar = expression[++index];
            //console.log("loopchar2: "+curChar);
            //console.log(pDepth);
            bflag--;
         }
         //error checking
         if(pDepth > 0){
            console.log("unbalanced parentheses");
            for( ; pDepth > 0; pDepth--){ 
               expression = expression.replace( "(", "");
            }
            rightOperand.corrected = getRightOperand(expression, startIndex).found;
            //return "ERROR";
         }
      }         

   //}//end while

   //now flip array to rebuild operand
   var opString = "";
   for(var i = 0; i < operand.length; i++){
      opString += operand[i];
   }
   console.log(opString);
   rightOperand.found = opString;
   if( !rightOperand.corrected ){//if the parentheses are properly balanced
       rightOperand.corrected = opString;
   }
   return rightOperand;    
}  

}//end Algebra.js


